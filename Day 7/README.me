---

## 🚀 React Mini Task: Counter + Live Text Preview

This is a beginner-friendly **React project** built with **Vite** to demonstrate the usage of the `useState` hook for managing state in functional components.
It includes:

* A **Counter** with Increment/Decrement functionality
* A **Live Text Preview** that updates as you type

---

## 📂 Project Setup

As I have created the other required folders and files for my code using the following commands:

```bash
mkdir react-mini-task
cd react-mini-task
```

Then I initialized a new Vite project:

```bash
npm create vite@latest
```

* Selected **React** as the framework
* Selected **JavaScript** as the variant

Then I went inside the project folder:

```bash
cd mini-task
```

Installed dependencies:

```bash
npm install
```

---

## 📝 Editing the Code

I created/edited the following files inside `src/`:

* **`App.jsx`** → Contains the React component with counter & text preview logic
* **`App.css`** → Contains styles for the app

The project demonstrates:

* Using **`useState`** for handling numbers (counter)
* Using **`useState`** for handling text input (live preview)
* Handling **button clicks** and **input changes** with event handlers

---

## ▶️ Running the Project

To run the development server, I typed:

```bash
npm run dev
```

This starts Vite and provides a local URL (like `http://localhost:5173`) where the app runs.

---

## ✨ Features

* 🔢 **Counter** → Increment & Decrement buttons (with count not going below 0)
* ⌨️ **Live Text Preview** → Type in the input and see your text update instantly
* 🎨 **Simple Styling** with `App.css`

---

## 📸 Preview (Demo)

When you run it, you’ll see:

1. A **counter** with buttons
2. An **input box** where text appears live below it

---

## 📚 What I Learned

* How to initialize a React project with Vite
* How to use the **`useState` hook** for state management
* How to handle **inputs** and **button clicks** in React
* How React automatically re-renders components when state changes

---

## 🛠 Tech Stack

* [React](https://react.dev/) (functional components + hooks)
* [Vite](https://vitejs.dev/) (build tool)
* JavaScript (ES6+)
* CSS3 (basic styling)

---

## ✅ Next Steps

* Add more styling with Tailwind or Bootstrap
* Add reset button for the counter
* Deploy the project to GitHub Pages / Vercel

---

## 📌 Note

I am only providing the files where I have worked (`App.jsx`, `App.css`) as the other files and folders are autogenerated by Vite during project setup.

